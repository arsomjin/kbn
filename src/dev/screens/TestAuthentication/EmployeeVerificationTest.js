import React, { useState } from 'react';
import { 
  Card, 
  Form, 
  Input, 
  Button, 
  Alert, 
  Typography, 
  Space, 
  Divider,
  Table,
  Tag,
  Descriptions,
  Row,
  Col
} from 'antd';
import { 
  SearchOutlined, 
  UserOutlined, 
  IdcardOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  CloseCircleOutlined
} from '@ant-design/icons';
import { useSelector } from 'react-redux';
import { 
  verifyEmployee, 
  CONFIDENCE_LEVELS,
  formatEmployeeInfo,
  getEmployeeStatusInfo,
  verifyByEmployeeCode,
  verifyByName,
  getEmployeeSuggestions
} from '../../../utils/employeeVerification';

const { Title, Text, Paragraph } = Typography;

const EmployeeVerificationTest = () => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [verificationResult, setVerificationResult] = useState(null);
  const [suggestions, setSuggestions] = useState([]);
  
  const { employees } = useSelector(state => state.data);

  const handleVerification = async (values) => {
    setLoading(true);
    setVerificationResult(null);
    setSuggestions([]);

    try {
      console.log('üîç Testing employee verification with values:', values);

      const result = await verifyEmployee({
        employeeCode: values.employeeCode,
        firstName: values.firstName,
        lastName: values.lastName,
        employees: employees
      });

      console.log('üìä Verification result:', result);
      setVerificationResult(result);

      // Get suggestions if verification failed
      if (!result.success && values.firstName) {
        const suggestions = getEmployeeSuggestions(
          values.firstName, 
          values.lastName, 
          employees
        );
        setSuggestions(suggestions);
      }

    } catch (error) {
      console.error('‚ùå Verification error:', error);
      setVerificationResult({
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ' + error.message,
        confidence: CONFIDENCE_LEVELS.NO_MATCH
      });
    } finally {
      setLoading(false);
    }
  };

  const handleTestCodeOnly = async (values) => {
    if (!values.employeeCode) return;

    setLoading(true);
    try {
      const result = await verifyByEmployeeCode({
        employeeCode: values.employeeCode,
        firstName: values.firstName,
        lastName: values.lastName,
        employees: employees
      });
      setVerificationResult(result);
    } catch (error) {
      console.error('Error testing code verification:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleTestNameOnly = async (values) => {
    if (!values.firstName) return;

    setLoading(true);
    try {
      const result = await verifyByName({
        firstName: values.firstName,
        lastName: values.lastName,
        employees: employees,
        providedEmployeeCode: values.employeeCode
      });
      setVerificationResult(result);
    } catch (error) {
      console.error('Error testing name verification:', error);
    } finally {
      setLoading(false);
    }
  };

  const getConfidenceColor = (confidence) => {
    switch (confidence) {
      case CONFIDENCE_LEVELS.EXACT_MATCH:
        return 'green';
      case CONFIDENCE_LEVELS.CODE_MATCH:
        return 'blue';
      case CONFIDENCE_LEVELS.NAME_MATCH:
        return 'orange';
      case CONFIDENCE_LEVELS.MULTIPLE_MATCHES:
        return 'purple';
      case CONFIDENCE_LEVELS.PARTIAL_MATCH:
        return 'yellow';
      default:
        return 'red';
    }
  };

  const getConfidenceText = (confidence) => {
    switch (confidence) {
      case CONFIDENCE_LEVELS.EXACT_MATCH:
        return '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (‡∏£‡∏´‡∏±‡∏™ + ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)';
      case CONFIDENCE_LEVELS.CODE_MATCH:
        return '‡∏™‡∏π‡∏á (‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)';
      case CONFIDENCE_LEVELS.NAME_MATCH:
        return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)';
      case CONFIDENCE_LEVELS.MULTIPLE_MATCHES:
        return '‡∏û‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ú‡∏•';
      case CONFIDENCE_LEVELS.PARTIAL_MATCH:
        return '‡∏ï‡∏£‡∏á‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô';
      default:
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    }
  };

  // Sample employee data for testing
  const sampleEmployees = employees ? Object.keys(employees).slice(0, 5).map(key => ({
    employeeCode: key,
    ...employees[key]
  })) : [];

  return (
    <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
      <Title level={2}>üß™ Employee Verification System Test</Title>
      <Paragraph>
        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
      </Paragraph>

      <Row gutter={24}>
        <Col xs={24} lg={12}>
          <Card title="üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" style={{ marginBottom: 24 }}>
            <Form
              form={form}
              layout="vertical"
              onFinish={handleVerification}
            >
              <Form.Item
                name="employeeCode"
                label="‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1)"
              >
                <Input
                  prefix={<IdcardOutlined />}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô KBN50007"
                />
              </Form.Item>

              <Form.Item
                name="firstName"
                label="‡∏ä‡∏∑‡πà‡∏≠ (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)"
              >
                <Input
                  prefix={<UserOutlined />}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏î‡πá‡∏°‡πÉ‡∏à"
                />
              </Form.Item>

              <Form.Item
                name="lastName"
                label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)"
              >
                <Input
                  prefix={<UserOutlined />}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏Å"
                />
              </Form.Item>

              <Space>
                <Button 
                  type="primary" 
                  icon={<SearchOutlined />}
                  htmlType="submit" 
                  loading={loading}
                >
                  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°
                </Button>
                <Button 
                  onClick={() => handleTestCodeOnly(form.getFieldsValue())}
                  loading={loading}
                >
                  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞
                </Button>
                <Button 
                  onClick={() => handleTestNameOnly(form.getFieldsValue())}
                  loading={loading}
                >
                  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞
                </Button>
              </Space>
            </Form>
          </Card>

          {/* Sample Data for Testing */}
          <Card title="üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö" size="small">
            <Table
              dataSource={sampleEmployees}
              size="small"
              pagination={false}
              scroll={{ y: 200 }}
              columns={[
                {
                  title: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                  dataIndex: 'employeeCode',
                  key: 'employeeCode',
                  width: 120
                },
                {
                  title: '‡∏ä‡∏∑‡πà‡∏≠',
                  dataIndex: 'firstName',
                  key: 'firstName',
                  width: 80
                },
                {
                  title: '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
                  dataIndex: 'lastName',
                  key: 'lastName',
                  width: 100
                },
                {
                  title: '‡∏™‡∏≤‡∏Ç‡∏≤',
                  dataIndex: 'affiliate',
                  key: 'affiliate',
                  width: 80
                },
                {
                  title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                  dataIndex: 'status',
                  key: 'status',
                  width: 60,
                  render: (status) => (
                    <Tag color={status === '‡∏õ‡∏Å‡∏ï‡∏¥' ? 'green' : 'red'}>
                      {status}
                    </Tag>
                  )
                }
              ]}
            />
          </Card>
        </Col>

        <Col xs={24} lg={12}>
          {/* Verification Results */}
          {verificationResult && (
            <Card 
              title={
                <Space>
                  {verificationResult.success ? (
                    <CheckCircleOutlined style={{ color: '#52c41a' }} />
                  ) : (
                    <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
                  )}
                  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                </Space>
              }
              style={{ marginBottom: 24 }}
            >
              <Alert
                type={verificationResult.success ? 'success' : 'error'}
                message={verificationResult.message}
                style={{ marginBottom: 16 }}
              />

              <Descriptions column={1} size="small">
                <Descriptions.Item label="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à">
                  <Tag color={getConfidenceColor(verificationResult.confidence)}>
                    {getConfidenceText(verificationResult.confidence)}
                  </Tag>
                </Descriptions.Item>
                <Descriptions.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö">
                  {new Date(verificationResult.timestamp).toLocaleString('th-TH')}
                </Descriptions.Item>
              </Descriptions>

              {/* Employee Details */}
              {verificationResult.employee && (
                <>
                  <Divider>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</Divider>
                  <Descriptions column={1} size="small">
                    <Descriptions.Item label="‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô">
                      {verificationResult.employee.employeeCode}
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
                      {verificationResult.employee.firstName} {verificationResult.employee.lastName}
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô">
                      {verificationResult.employee.nickName || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á">
                      {verificationResult.employee.position || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏™‡∏≤‡∏Ç‡∏≤">
                      {verificationResult.employee.affiliate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î">
                      {verificationResult.employee.provinceId || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                      <Tag color={verificationResult.employee.status === '‡∏õ‡∏Å‡∏ï‡∏¥' ? 'green' : 'red'}>
                        {verificationResult.employee.status || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                      </Tag>
                    </Descriptions.Item>
                    <Descriptions.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô">
                      {verificationResult.employee.startDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                    </Descriptions.Item>
                  </Descriptions>
                </>
              )}

              {/* Multiple Matches */}
              {verificationResult.employees && verificationResult.employees.length > 0 && (
                <>
                  <Divider>‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö ({verificationResult.employees.length} ‡∏Ñ‡∏ô)</Divider>
                  <Table
                    dataSource={verificationResult.employees}
                    size="small"
                    pagination={false}
                    scroll={{ y: 200 }}
                    columns={[
                      {
                        title: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                        dataIndex: 'employeeCode',
                        key: 'employeeCode'
                      },
                      {
                        title: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
                        key: 'fullName',
                        render: (_, record) => `${record.firstName} ${record.lastName || ''}`
                      },
                      {
                        title: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á',
                        dataIndex: 'position',
                        key: 'position'
                      },
                      {
                        title: '‡∏™‡∏≤‡∏Ç‡∏≤',
                        dataIndex: 'affiliate',
                        key: 'affiliate'
                      }
                    ]}
                  />
                </>
              )}

              {/* Suggestions */}
              {verificationResult.suggestions && verificationResult.suggestions.length > 0 && (
                <>
                  <Divider>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</Divider>
                  <ul>
                    {verificationResult.suggestions.map((suggestion, index) => (
                      <li key={index}>{suggestion}</li>
                    ))}
                  </ul>
                </>
              )}
            </Card>
          )}

          {/* Employee Suggestions */}
          {suggestions && suggestions.length > 0 && (
            <Card title="üí° ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á" size="small">
              <Table
                dataSource={suggestions}
                size="small"
                pagination={false}
                columns={[
                  {
                    title: '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
                    dataIndex: 'employeeCode',
                    key: 'employeeCode'
                  },
                  {
                    title: '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
                    key: 'fullName',
                    render: (_, record) => `${record.firstName} ${record.lastName || ''}`
                  },
                  {
                    title: '‡∏™‡∏≤‡∏Ç‡∏≤',
                    dataIndex: 'affiliate',
                    key: 'affiliate'
                  },
                  {
                    title: '‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥',
                    key: 'action',
                    render: (_, record) => (
                      <Button
                        size="small"
                        onClick={() => {
                          form.setFieldsValue({
                            employeeCode: record.employeeCode,
                            firstName: record.firstName,
                            lastName: record.lastName
                          });
                        }}
                      >
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                      </Button>
                    )
                  }
                ]}
              />
            </Card>
          )}
        </Col>
      </Row>

      {/* Test Scenarios */}
      <Card title="üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥" style={{ marginTop: 24 }}>
        <Row gutter={16}>
          <Col xs={24} md={8}>
            <Card size="small" title="‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à">
              <ul style={{ fontSize: '14px', margin: 0 }}>
                <li>‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</li>
                <li>‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</li>
                <li>‡πÉ‡∏™‡πà‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô</li>
              </ul>
            </Card>
          </Col>
          <Col xs={24} md={8}>
            <Card size="small" title="‚ö†Ô∏è ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î">
              <ul style={{ fontSize: '14px', margin: 0 }}>
                <li>‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ú‡∏¥‡∏î + ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å</li>
                <li>‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å + ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏¥‡∏î</li>
                <li>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô</li>
              </ul>
            </Card>
          </Col>
          <Col xs={24} md={8}>
            <Card size="small" title="‚ùå ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•">
              <ul style={{ fontSize: '14px', margin: 0 }}>
                <li>‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</li>
                <li>‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î</li>
                <li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤</li>
              </ul>
            </Card>
          </Col>
        </Row>
      </Card>
    </div>
  );
};

export default EmployeeVerificationTest; 