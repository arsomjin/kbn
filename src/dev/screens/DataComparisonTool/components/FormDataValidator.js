// üöÄ FORM DATA VALIDATOR
// Advanced validation tool for form data integrity and business rules

import React, { useState, useCallback, useContext } from 'react';
import {
  Card,
  Button,
  Table,
  Alert,
  Typography,
  Row,
  Col,
  Space,
  Tag,
  Input,
  Form,
  Select,
  Switch,
  Tooltip,
  Modal,
  notification,
  Collapse,
  Descriptions,
} from 'antd';
import {
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  BugOutlined,
  InfoCircleOutlined,
  WarningOutlined,
  ShieldCheckOutlined,
  DatabaseOutlined,
  RocketOutlined,
} from '@ant-design/icons';
import { FirebaseContext } from '../../../../firebase';
import { usePermissions } from '../../../../hooks/usePermissions';
import { getBranchName, getProvinceName } from '../../../../utils/mappings';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;
const { Panel } = Collapse;
const { TextArea } = Input;

// üîß VALIDATION RULES: Comprehensive validation schema
const VALIDATION_RULES = {
  // Required Fields
  required: {
    name: '‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤',
    severity: 'error',
    validate: (value, field) => {
      if (value === null || value === undefined || value === '') {
        return { valid: false, message: `${field} ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô` };
      }
      return { valid: true };
    },
  },

  // Data Types
  string: {
    name: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
    severity: 'error',
    validate: (value, field) => {
      if (value !== null && value !== undefined && typeof value !== 'string') {
        return { valid: false, message: `${field} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°` };
      }
      return { valid: true };
    },
  },

  number: {
    name: '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç',
    severity: 'error',
    validate: (value, field) => {
      if (
        value !== null &&
        value !== undefined &&
        (isNaN(value) || typeof value !== 'number')
      ) {
        return { valid: false, message: `${field} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç` };
      }
      return { valid: true };
    },
  },

  // Geographic Validation
  provinceId: {
    name: '‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
    severity: 'error',
    validate: (value, field) => {
      const validProvinces = ['nakhon-ratchasima', 'nakhon-sawan'];
      if (value && !validProvinces.includes(value)) {
        return { valid: false, message: `${field} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${value}` };
      }
      return { valid: true };
    },
  },

  branchCode: {
    name: '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
    severity: 'error',
    validate: (value, field) => {
      const validBranches = [
        '0450',
        'NMA002',
        'NMA003',
        'NSN001',
        'NSN002',
        'NSN003',
      ];
      if (value && !validBranches.includes(value)) {
        return { valid: false, message: `${field} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${value}` };
      }
      return { valid: true };
    },
  },

  // Business Rules
  positiveAmount: {
    name: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏ß‡∏Å',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å',
    severity: 'warning',
    validate: (value, field) => {
      if (field.includes('amount') || field.includes('Amount')) {
        if (value !== null && value !== undefined && value <= 0) {
          return { valid: false, message: `${field} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0` };
        }
      }
      return { valid: true };
    },
  },

  dateFormat: {
    name: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
    severity: 'warning',
    validate: (value, field) => {
      if (field.includes('date') || field.includes('Date')) {
        if (value && !dayjs(value).isValid()) {
          return { valid: false, message: `${field} ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á` };
        }
      }
      return { valid: true };
    },
  },

  // RBAC Validation
  rbacCompliance: {
    name: '‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° RBAC',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é RBAC',
    severity: 'error',
    validate: (value, field, data, userRBAC) => {
      if (field === 'provinceId' && userRBAC?.allowedProvinces?.length > 0) {
        if (value && !userRBAC.allowedProvinces.includes(value)) {
          return {
            valid: false,
            message: `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${getProvinceName(value)}`,
          };
        }
      }
      return { valid: true };
    },
  },

  // Data Consistency
  consistency: {
    name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå',
    severity: 'warning',
    validate: (value, field, data) => {
      // Check province-branch consistency
      if (field === 'branchCode' && data.provinceId) {
        const provinceBranches = {
          'nakhon-ratchasima': ['0450', 'NMA002', 'NMA003'],
          'nakhon-sawan': ['NSN001', 'NSN002', 'NSN003'],
        };

        const allowedBranches = provinceBranches[data.provinceId] || [];
        if (value && !allowedBranches.includes(value)) {
          return {
            valid: false,
            message: `‡∏™‡∏≤‡∏Ç‡∏≤ ${getBranchName(value)} ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${getProvinceName(data.provinceId)}`,
          };
        }
      }
      return { valid: true };
    },
  },
};

// üîß FIELD SCHEMAS: Define validation rules for different field types
const FIELD_SCHEMAS = {
  'income-daily': {
    incomeId: ['required', 'string'],
    customerName: ['required', 'string'],
    amount: ['required', 'number', 'positiveAmount'],
    date: ['required', 'dateFormat'],
    provinceId: ['required', 'provinceId', 'rbacCompliance'],
    branchCode: ['required', 'branchCode', 'consistency'],
  },
  'expense-daily': {
    expenseId: ['required', 'string'],
    description: ['required', 'string'],
    amount: ['required', 'number', 'positiveAmount'],
    date: ['required', 'dateFormat'],
    provinceId: ['required', 'provinceId', 'rbacCompliance'],
    branchCode: ['required', 'branchCode', 'consistency'],
  },
  'sale-orders': {
    saleOrderNumber: ['required', 'string'],
    customerName: ['required', 'string'],
    totalAmount: ['required', 'number', 'positiveAmount'],
    date: ['required', 'dateFormat'],
    provinceId: ['required', 'provinceId', 'rbacCompliance'],
    branchCode: ['required', 'branchCode', 'consistency'],
  },
};

const FormDataValidator = ({ data, schema, onValidationComplete }) => {
  const [validationResults, setValidationResults] = useState([]);
  const [isValidating, setIsValidating] = useState(false);
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [showDetails, setShowDetails] = useState(false);
  const [customRules, setCustomRules] = useState('');
  const [validationSummary, setValidationSummary] = useState({
    total: 0,
    passed: 0,
    warnings: 0,
    errors: 0,
  });

  const { userRBAC } = usePermissions();

  // üöÄ VALIDATE: Execute comprehensive validation
  const validateData = useCallback(async () => {
    if (!data || Object.keys(data).length === 0) {
      notification.warning({
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
        description: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
      });
      return;
    }

    setIsValidating(true);

    try {
      const results = [];
      const fieldSchema = FIELD_SCHEMAS[schema] || {};
      let totalChecks = 0;
      let passedChecks = 0;
      let warningChecks = 0;
      let errorChecks = 0;

      // Validate each field
      for (const [field, value] of Object.entries(data)) {
        const rules = fieldSchema[field] || [];

        for (const ruleName of rules) {
          const rule = VALIDATION_RULES[ruleName];
          if (!rule) continue;

          totalChecks++;

          const result = rule.validate(value, field, data, userRBAC);

          if (!result.valid) {
            const validationResult = {
              id: `${field}-${ruleName}`,
              field,
              rule: rule.name,
              severity: rule.severity,
              message: result.message,
              value,
              description: rule.description,
              timestamp: new Date().toISOString(),
            };

            results.push(validationResult);

            if (rule.severity === 'error') errorChecks++;
            else if (rule.severity === 'warning') warningChecks++;
          } else {
            passedChecks++;
          }
        }
      }

      // Custom validation rules
      if (customRules.trim()) {
        try {
          const customRuleFunction = new Function(
            'data',
            'userRBAC',
            customRules
          );
          const customResult = customRuleFunction(data, userRBAC);

          if (customResult && !customResult.valid) {
            results.push({
              id: 'custom-rule',
              field: 'custom',
              rule: '‡∏Å‡∏é‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á',
              severity: 'warning',
              message: customResult.message || '‡∏Å‡∏é‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô',
              value: 'N/A',
              description: '‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
              timestamp: new Date().toISOString(),
            });
            warningChecks++;
          } else {
            passedChecks++;
          }
          totalChecks++;
        } catch (error) {
          results.push({
            id: 'custom-rule-error',
            field: 'custom',
            rule: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏é‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á',
            severity: 'error',
            message: `‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏é‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á: ${error.message}`,
            value: 'N/A',
            description: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏é‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á',
            timestamp: new Date().toISOString(),
          });
          errorChecks++;
          totalChecks++;
        }
      }

      setValidationResults(results);
      setValidationSummary({
        total: totalChecks,
        passed: passedChecks,
        warnings: warningChecks,
        errors: errorChecks,
      });

      if (onValidationComplete) {
        onValidationComplete(results, {
          total: totalChecks,
          passed: passedChecks,
          warnings: warningChecks,
          errors: errorChecks,
        });
      }

      notification.success({
        message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
        description: `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${totalChecks} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      });
    } catch (error) {
      console.error('Validation error:', error);
      notification.error({
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
      });
    } finally {
      setIsValidating(false);
    }
  }, [data, schema, customRules, userRBAC, onValidationComplete]);

  // üé® FILTER: Filter results by severity
  const filteredResults = validationResults.filter((result) => {
    if (selectedSeverity === 'all') return true;
    return result.severity === selectedSeverity;
  });

  // üé® RENDER: Validation results table columns
  const resultColumns = [
    {
      title: '‡∏ü‡∏¥‡∏•‡∏î‡πå',
      dataIndex: 'field',
      key: 'field',
      width: 120,
      render: (field) => <Text code>{field}</Text>,
    },
    {
      title: '‡∏Å‡∏é',
      dataIndex: 'rule',
      key: 'rule',
      width: 150,
    },
    {
      title: '‡∏£‡∏∞‡∏î‡∏±‡∏ö',
      dataIndex: 'severity',
      key: 'severity',
      width: 100,
      render: (severity) => {
        const config = {
          error: {
            color: 'red',
            icon: <ExclamationCircleOutlined />,
            text: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          },
          warning: {
            color: 'orange',
            icon: <WarningOutlined />,
            text: '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
          },
          info: { color: 'blue', icon: <InfoCircleOutlined />, text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' },
        };
        const { color, icon, text } = config[severity] || config.info;
        return (
          <Tag color={color} icon={icon}>
            {text}
          </Tag>
        );
      },
    },
    {
      title: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
      dataIndex: 'message',
      key: 'message',
      ellipsis: true,
    },
    {
      title: '‡∏Ñ‡πà‡∏≤',
      dataIndex: 'value',
      key: 'value',
      width: 150,
      render: (value) => (
        <Text type='secondary' ellipsis>
          {value === null || value === undefined ? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' : String(value)}
        </Text>
      ),
    },
  ];

  return (
    <div className='form-data-validator'>
      <Card>
        <Title level={3}>
          <ShieldCheckOutlined className='mr-2' />
          Form Data Validator
        </Title>

        {/* Control Section */}
        <Card size='small' className='mb-4'>
          <Row gutter={16} align='middle'>
            <Col span={8}>
              <Button
                type='primary'
                icon={<CheckCircleOutlined />}
                onClick={validateData}
                loading={isValidating}
                block
              >
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </Button>
            </Col>

            <Col span={8}>
              <Select
                value={selectedSeverity}
                onChange={setSelectedSeverity}
                style={{ width: '100%' }}
                placeholder='‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö'
              >
                <Option value='all'>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Option>
                <Option value='error'>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</Option>
                <Option value='warning'>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Option>
                <Option value='info'>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Option>
              </Select>
            </Col>

            <Col span={8}>
              <Switch
                checked={showDetails}
                onChange={setShowDetails}
                checkedChildren='‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
                unCheckedChildren='‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
              />
            </Col>
          </Row>
        </Card>

        {/* Summary Section */}
        {validationResults.length > 0 && (
          <Card size='small' className='mb-4'>
            <Row gutter={16}>
              <Col span={6}>
                <div className='text-center'>
                  <div className='text-2xl font-bold'>
                    {validationSummary.total}
                  </div>
                  <div className='text-gray-500'>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                </div>
              </Col>
              <Col span={6}>
                <div className='text-center'>
                  <div className='text-2xl font-bold text-green-600'>
                    {validationSummary.passed}
                  </div>
                  <div className='text-gray-500'>‡∏ú‡πà‡∏≤‡∏ô</div>
                </div>
              </Col>
              <Col span={6}>
                <div className='text-center'>
                  <div className='text-2xl font-bold text-orange-600'>
                    {validationSummary.warnings}
                  </div>
                  <div className='text-gray-500'>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</div>
                </div>
              </Col>
              <Col span={6}>
                <div className='text-center'>
                  <div className='text-2xl font-bold text-red-600'>
                    {validationSummary.errors}
                  </div>
                  <div className='text-gray-500'>‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</div>
                </div>
              </Col>
            </Row>
          </Card>
        )}

        {/* Custom Rules Section */}
        <Collapse className='mb-4'>
          <Panel header='‡∏Å‡∏é‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (JavaScript)' key='custom-rules'>
            <Paragraph>
              ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ JavaScript:
            </Paragraph>
            <TextArea
              rows={6}
              value={customRules}
              onChange={(e) => setCustomRules(e.target.value)}
              placeholder={`// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000,000
if (data.amount && data.amount > 1000000) {
  return { valid: false, message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î' };
}
return { valid: true };`}
            />
          </Panel>
        </Collapse>

        {/* Results Section */}
        {filteredResults.length > 0 ? (
          <Card size='small'>
            <Title level={4}>
              ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ({filteredResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
            </Title>

            <Table
              columns={resultColumns}
              dataSource={filteredResults}
              rowKey='id'
              pagination={{ pageSize: 20 }}
              scroll={{ x: 800 }}
              size='small'
              expandable={
                showDetails
                  ? {
                      expandedRowRender: (record) => (
                        <Descriptions size='small' column={1}>
                          <Descriptions.Item label='‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'>
                            {record.description}
                          </Descriptions.Item>
                          <Descriptions.Item label='‡πÄ‡∏ß‡∏•‡∏≤'>
                            {new Date(record.timestamp).toLocaleString('th-TH')}
                          </Descriptions.Item>
                        </Descriptions>
                      ),
                    }
                  : undefined
              }
            />
          </Card>
        ) : validationResults.length === 0 ? (
          <Alert
            message='‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
            description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
            type='info'
            showIcon
          />
        ) : (
          <Alert
            message='‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
            description='‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
            type='success'
            showIcon
          />
        )}
      </Card>
    </div>
  );
};

export default FormDataValidator;
