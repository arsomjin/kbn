import React, { Fragment } from 'react';
import { Tag, Form, Input as AInput, Collapse } from 'antd';
import { Row, Col } from 'shards-react';
import moment from 'moment';
import { DatePicker } from 'elements';
import BranchSelector from 'components/BranchSelector';
import DocSelector from 'components/DocSelector';
import { Numb } from 'functions';
import SaleViewer from 'Modules/Sales/Vehicles/SaleViewer';
import { InputGroup, Input } from 'elements';
import EmployeeSelector from 'components/EmployeeSelector';
import { getRules } from 'api/Table';
import { checkAccountIncomeDataExists } from 'Modules/Account/api';
import { createNewOrderId } from 'Modules/Account/api';
import { checkCreditDataExists } from 'Modules/Credit/api';
import Text from 'antd/lib/typography/Text';

export const columns = [
  {
    title: '#',
    dataIndex: 'id',
    align: 'center',
  },
  {
    title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    dataIndex: 'date',
  },
  {
    title: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢',
    dataIndex: 'saleNo',
  },
  {
    title: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
    dataIndex: 'saleType',
  },
  {
    title: (
      <span role="img" aria-label="search">
        üîç <Text className="ml-2">‡∏£‡∏´‡∏±‡∏™ / ‡∏£‡∏∏‡πà‡∏ô / ‡∏ä‡∏∑‡πà‡∏≠ / ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</Text>
      </span>
    ),
    ellipsis: true,
    dataIndex: 'productCode',
  },
  {
    title: '‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ',
    dataIndex: 'vehicleNo',
  },
  {
    title: '‡πÄ‡∏•‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå',
    dataIndex: 'peripheralNo',
  },
  {
    title: '‡∏™‡∏≤‡∏Ç‡∏≤',
    dataIndex: 'branchCode',
  },
  {
    title: '‡∏ä‡∏∑‡πà‡∏≠',
    dataIndex: 'firstName',
  },
  {
    title: '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
    dataIndex: 'lastName',
  },
  {
    title: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    dataIndex: 'amtFull',
  },
];

export const expandedRowRender = (record) => (
  <div className="ml-4 bg-light bordered pb-1">
    {record?.receiveNo && <Tag>{`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${record.receiveNo}`}</Tag>}
    {record?.billNoSKC && <Tag>{`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${record.billNoSKC}`}</Tag>}
    {record?.branch && <Tag>{`‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${record.branch}`}</Tag>}
    {record?.inputDate && (
      <Tag>{`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏µ‡∏¢‡πå: ${moment(record.inputDate, 'YYYY-MM-DD').format(
        'DD/MM/YYYY'
      )}`}</Tag>
    )}
    {record?.productCode && <Tag>{`‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${record.productCode}`}</Tag>}
    {record?.vehicleNo && <Tag>{`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ: ${record.vehicleNo}`}</Tag>}
    {record?.peripheralNo && (
      <Tag>{`‡πÄ‡∏•‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≠‡∏û‡πà‡∏ß‡∏á: ${record.peripheralNo}`}</Tag>
    )}
  </div>
);

export const initSearchValue = {
  customerId: null,
  saleNo: null,
  saleType: null,
  startDate: moment().format('YYYY-MM-DD'),
  endDate: moment().format('YYYY-MM-DD'),
  branchCode: null,
};

export const renderHeader = (saleType) => (
  <div className="border-bottom bg-white px-3 pt-3">
    <Row>
      <Col md="8">
        <Form.Item name="saleNo" label="üîç  ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤">
          <DocSelector
            collection="sections/sales/vehicles"
            orderBy={['saleNo', 'firstName']}
            labels={['saleNo', 'firstName', 'lastName']}
            wheres={[['saleType', '==', saleType]]}
            size="small"
            hasAll
            hasKeywords
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="2">
        <Form.Item name="startDate" label="üîç  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà">
          <DatePicker placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" />
        </Form.Item>
      </Col>
      <Col md="2">
        <Form.Item name="endDate" label="‡∏ñ‡∏∂‡∏á ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà">
          <DatePicker placeholder="‡∏ñ‡∏∂‡∏á ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" />
        </Form.Item>
      </Col>
      <Col md="4">
        <Form.Item name="branchCode" label="üîç  ‡∏™‡∏≤‡∏Ç‡∏≤">
          <BranchSelector placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å ‡∏™‡∏≤‡∏Ç‡∏≤" hasAll />
        </Form.Item>
      </Col>
    </Row>
  </div>
);

export const initAccountValues = {
  accountId: null,
  accountNo: null,
  customerId: null,
  prefix: '‡∏ô‡∏≤‡∏¢',
  firstName: null,
  lastName: null,
  contractDeliverDate: undefined,
  contractAmtReceivedDate: undefined,
  contractAmtReceivedBank: null,
  contractAmtReceivedAccNo: null,
  amtFull: null,
  downPayment: null,
  totalDownDiscount: null,
  firstInstallment: null,
  amtBaacFee: null,
  baacNo: null,
  baacDate: undefined,
  amtInsurance: null,
  amtActOfLegal: null,
  loanInfoIncome: null,
  vat: null,
  wht: null,
  taxInvoice: null,
  taxInvoiceDate: undefined,
  saleId: null,
  saleNo: null,
  saleItems: [],
  inputBy: null,
  remark: null,
};

export const getBAACAccountDataFromSale = (sale, account) =>
  new Promise(async (r, j) => {
    try {
      let result = {};
      // Check existing account data.
      const oAccount = await checkAccountIncomeDataExists(sale);
      if (oAccount && oAccount.inputBy) {
        result = {
          ...initAccountValues,
          ...oAccount,
        };
      } else {
        // Create data from credit data.
        let nAccount = await checkCreditDataExists(sale);
        delete nAccount.created;
        delete nAccount.createdBy;
        delete nAccount.status;
        nAccount?.editedBy && delete nAccount.editedBy;
        result = {
          ...initAccountValues,
          accountId: createNewOrderId('ACC-VEH'),
          ...nAccount,
          creditInputBy: nAccount.inputBy,
          inputBy: null,
        };
      }
      r(result);
    } catch (e) {
      j(e);
    }
  });

export const getNetTotal = (values) => {
  let nTotal;
  switch (values.saleType) {
    case 'sklLeasing':
      nTotal =
        Numb(values.amtFull) -
        Numb(values.downPayment) +
        Numb(values.totalDownDiscount) -
        Numb(values.firstInstallment) -
        Numb(values.amtInsurance) -
        Numb(values.amtActOfLegal) +
        Numb(values.loanInfoIncome) +
        Numb(values.vat) -
        Numb(values.wht);
      break;
    case 'baac':
      nTotal =
        Numb(values.amtFull) -
        Numb(values.downPayment) +
        Numb(values.totalDownDiscount) -
        Numb(values.firstInstallment) -
        Numb(values.amtInsurance) -
        Numb(values.amtBaacFee) -
        Numb(values.amtActOfLegal) +
        Numb(values.loanInfoIncome) +
        Numb(values.vat) -
        Numb(values.wht);
      break;

    default:
      nTotal =
        Numb(values.amtFull) -
        Numb(values.downPayment) +
        Numb(values.totalDownDiscount) -
        Numb(values.firstInstallment) -
        Numb(values.amtInsurance) -
        Numb(values.amtActOfLegal) -
        Numb(values.loanInfoIncome) +
        Numb(values.vat) -
        Numb(values.wht);
      break;
  }
  return nTotal;
};

export const renderSale = ({ sale, form, grant, readOnly }) => {
  return (
    <Collapse className="my-3">
      <Collapse.Panel header={`‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${sale.saleNo || ''}`} key="1">
        {/* <label className="text-light mb-2">{`‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢ ${sale.saleNo || ''}`}</label> */}
        <SaleViewer {...{ sale, form, grant, readOnly }} />
      </Collapse.Panel>
    </Collapse>
  );
};

export const renderBAACBody = ({ values, grant, readOnly, netTotal }) => (
  <Fragment>
    <label className="text-primary mb-3">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</label>
    <Row>
      <Col md="6">
        <Form.Item
          name="accountNo"
          label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
          rules={getRules(['required'])}
        >
          <Input
            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row>
    <Row form style={{ alignItems: 'center' }}>
      <Col md="2">
        <Form.Item name="prefix">
          <Input placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" readOnly />
        </Form.Item>
      </Col>
      <Col md="3">
        <Form.Item name="firstName">
          <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" readOnly />
        </Form.Item>
      </Col>
      {!['‡∏´‡∏à‡∏Å.', '‡∏ö‡∏à.'].includes(values.prefix) && (
        <Col md="4">
          <Form.Item name="lastName">
            <Input placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" readOnly />
          </Form.Item>
        </Col>
      )}
      <Col md="3">
        <Form.Item name="phoneNumber" rules={getRules(['mobileNumber'])}>
          <Input mask="111-1111111" placeholder="012-3456789" disabled />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item name="amtFull" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="downPayment" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item name="totalDownDiscount" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏£‡∏ß‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡πÇ‡∏õ‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏≤‡∏ß‡∏ô‡πå SKC"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="firstInstallment" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item name="contractDeliverDate" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏™‡∏Å‡∏ï./‡∏ò‡∏Å‡∏™."
            alignRight
            disabled={!grant}
            readOnly={readOnly}
            date
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item
          name="contractAmtReceivedDate"
          rules={getRules(['required'])}
        >
          <InputGroup
            addonBefore="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ‡∏™‡∏Å‡∏ï./‡∏ò‡∏Å‡∏™."
            alignRight
            disabled={!grant}
            readOnly={readOnly}
            date
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item
          name="contractAmtReceivedBank"
          rules={getRules(['required'])}
        >
          <InputGroup
            addonBefore="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô"
            disabled={!grant}
            readOnly={readOnly}
            selfBank
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="baacFee" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡∏ò‡∏Å‡∏™./‡∏™‡∏Å‡∏ï."
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item name="baacNo" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö ‡∏ò‡∏Å‡∏™./‡∏™‡∏Å‡∏ï."
            alignRight
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="baacDate" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ö ‡∏ò‡∏Å‡∏™./‡∏™‡∏Å‡∏ï."
            alignRight
            disabled={!grant}
            readOnly={readOnly}
            date
          />
        </Form.Item>
      </Col>
    </Row>
    {/* <Row>
      <Col md="6">
        <Form.Item
          name="totalBeforeDeductInsurance"
          rules={getRules(['required'])}
        >
          <InputGroup
            addonBefore="‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô/‡∏û‡∏£‡∏ö."
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item name="amtInsurance" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="amtActOfLegal" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏Ñ‡πà‡∏≤ ‡∏û‡∏£‡∏ö."
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row> */}
    {/* <Row>
      <Col md="6">
        <Form.Item name="loanInfoIncome">
          <InputGroup
            addonBefore="‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="vat" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row> */}
    {/* <Row>
      <Col md="6">
        <Form.Item name="wht">
          <InputGroup
            addonBefore="‡∏†‡∏≤‡∏©‡∏µ ‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
    </Row> */}
    <Row>
      <Col md="6">
        <Form.Item name="taxInvoice" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏Ç‡∏≤‡∏¢"
            alignRight
            disabled={!grant}
            readOnly={readOnly}
          />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item name="taxInvoiceDate" rules={getRules(['required'])}>
          <InputGroup
            addonBefore="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ"
            alignRight
            disabled={!grant}
            readOnly={readOnly}
            date
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item>
          <InputGroup
            addonBefore="‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"
            addonAfter="‡∏ö‡∏≤‡∏ó"
            alignRight
            currency
            value={netTotal}
            readOnly
            primaryAfter
            primaryBefore
            primary
          />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="6">
        <Form.Item name="creditInputBy" label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢">
          <EmployeeSelector disabled />
        </Form.Item>
      </Col>
      <Col md="6">
        <Form.Item
          name="inputBy"
          label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÇ‡∏î‡∏¢"
          rules={getRules(['required'])}
        >
          <EmployeeSelector disabled={!grant || readOnly} />
        </Form.Item>
      </Col>
    </Row>
    <Row>
      <Col md="8">
        <Form.Item name="remark" label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏">
          <AInput.TextArea disabled={!grant} readOnly={readOnly} />
        </Form.Item>
      </Col>
    </Row>
  </Fragment>
);
