rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ====================================================================
    // HELPER FUNCTIONS FOR CLEAN SLATE RBAC SYSTEM (Single Structure Only)
    // ====================================================================
    
    // Get user's RBAC data from their user document
    function getUserRBAC() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if user exists in system
    function userExists() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Check if user has Clean Slate RBAC access structure
    function hasRBACAccess() {
      return request.auth != null && 
             userExists() &&
             getUserRBAC().access != null &&
             getUserRBAC().access.authority != null;
    }
    
    // Check if user is newly registered (pending approval)
    function isNewUser() {
      return request.auth != null && 
             userExists() &&
             (getUserRBAC().isApproved == false || 
              getUserRBAC().approvalStatus == 'pending');
    }
    
    // Check if user is developer (has all access)
    function isDeveloper() {
      return request.auth != null && 
             hasRBACAccess() &&
             getUserRBAC().isDev == true;
    }
    
    // Get user's authority level (Clean Slate only)
    function getUserAuthority() {
      return getUserRBAC().access.authority;
    }
    
    // Get user's allowed provinces (Clean Slate only)
    function getUserAllowedProvinces() {
      return getUserRBAC().access.geographic.allowedProvinces;
    }
    
    // Get user's allowed branches (Clean Slate only)
    function getUserAllowedBranches() {
      return getUserRBAC().access.geographic.allowedBranches;
    }
    
    // Get user's home province (Clean Slate only)
    function getUserHomeProvince() {
      return getUserRBAC().access.geographic.homeProvince;
    }
    
    // Get user's home branch (Clean Slate only)
    function getUserHomeBranch() {
      return getUserRBAC().access.geographic.homeBranch;
    }
    
    // Get user's departments (Clean Slate only)
    function getUserDepartments() {
      return getUserRBAC().access.departments;
    }
    
    // Get user's geographic scope (Clean Slate only)
    function getUserGeographicScope() {
      return getUserRBAC().access.geographic.scope;
    }
    
    // Check if user has ADMIN authority level
    function isAdmin() {
      return request.auth != null && 
             hasRBACAccess() &&
             (getUserAuthority() == 'ADMIN' || isDeveloper());
    }
    
    // Check if user has MANAGER authority level or higher
    function isManagerOrHigher() {
      return request.auth != null && 
             hasRBACAccess() &&
             (getUserAuthority() in ['ADMIN', 'MANAGER'] || isDeveloper());
    }
    
    // Check if user has LEAD authority level or higher
    function isLeadOrHigher() {
      return request.auth != null && 
             hasRBACAccess() &&
             (getUserAuthority() in ['ADMIN', 'MANAGER', 'LEAD'] || isDeveloper());
    }
    
    // Check if user has access to ALL geographic scope
    function hasAllGeographicAccess() {
      return request.auth != null && 
             hasRBACAccess() &&
             (getUserGeographicScope() == 'ALL' || isDeveloper());
    }
    
    // Check if user has access to specific province
    function hasProvinceAccess(provinceId) {
      return request.auth != null && 
             hasRBACAccess() &&
             (hasAllGeographicAccess() ||
              (getUserGeographicScope() == 'PROVINCE' && 
               provinceId in getUserAllowedProvinces()) ||
              (getUserGeographicScope() == 'BRANCH' && 
               provinceId == getUserHomeProvince()));
    }
    
    // Check if user has access to specific branch
    function hasBranchAccess(branchCode) {
      return request.auth != null && 
             hasRBACAccess() &&
             (hasAllGeographicAccess() ||
              branchCode in getUserAllowedBranches() ||
              branchCode == getUserHomeBranch());
    }
    
    // Check if user has department access
    function hasDepartmentAccess(department) {
      return request.auth != null && 
             hasRBACAccess() &&
             (isAdmin() ||
              department in getUserDepartments());
    }
    
    // ====================================================================
    // USER DOCUMENT ACCESS RULES
    // ====================================================================
    
    // Users can access their own documents and subcollections
    match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
      // Admins and managers can read other users for management purposes
      allow read: if isManagerOrHigher();
      // Only admins can modify other users
      allow write: if isAdmin();
    }
    
    match /users/{uid}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
      // Admin access to user subcollections
      allow read, write: if isAdmin();
    }
    
    // ====================================================================
    // SYSTEM AND APPROVAL REQUESTS
    // ====================================================================
    
    // Approval requests - authenticated users can access
    match /approvalRequests/{requestId} {
      allow read, write: if request.auth != null;
    }
    
    // Notifications - allow authenticated users to create/read notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // ====================================================================
    // COMPANY STRUCTURE DATA (Reference Data - Public for Registration)
    // ====================================================================
    
    // Provinces - PUBLIC READ for registration, write for admins only
    match /data/company/provinces/{provinceId} {
      allow read: if true; // Public read access for signup form
      allow write: if isAdmin();
    }
    
    // Branches - PUBLIC READ for registration, write for admins only
    match /data/company/branches/{branchId} {
      allow read: if true; // Public read access for signup form
      allow write: if isAdmin();
    }
    
    // Departments - PUBLIC READ for registration, write for admins only
    match /data/company/departments/{departmentId} {
      allow read: if true; // Public read access for signup form
      allow write: if isAdmin();
    }
    
    // Employees - restricted access (contains sensitive data)
    match /data/company/employees/{employeeId} {
      allow read: if request.auth != null; // Still requires auth
      allow write: if isManagerOrHigher();
    }
    
    // Banks - read access for all authenticated users (needed for forms), write for admins
    match /data/company/banks/{bankId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Bank Names - read access for all authenticated users (needed for forms), write for admins
    match /data/company/bankNames/{bankNameId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Executives - read access for all authenticated users (reference data), write for admins
    match /data/company/executives/{executiveId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Locations - read access for all authenticated users (needed for selectors), write for managers+
    match /data/company/locations/{locationId} {
      allow read: if request.auth != null;
      allow write: if isManagerOrHigher();
    }
    
    // Permissions - read access for all authenticated users (UI components need this), write for admins only
    match /data/company/permissions/{permissionId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Permission Categories - read access for all authenticated users (UI components need this), write for admins only
    match /data/company/permissionCategories/{categoryId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // User Groups - read access for all authenticated users (reference data), write for admins only
    match /data/company/userGroups/{groupId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Warehouses - read access for all authenticated users (needed for forms/selectors), write for managers+
    match /data/company/warehouses/{warehouseId} {
      allow read: if request.auth != null;
      allow write: if isManagerOrHigher();
    }
    
    // Additional reference data that authenticated users need access to (FALLBACK - must be last)
    match /data/{document=**} {
      allow read: if request.auth != null;
      allow write: if isManagerOrHigher();
    }
    
    // ====================================================================
    // BUSINESS DATA ACCESS WITH RBAC FILTERING
    // ====================================================================
    
    // Accounting operational data - restrict to accounting dept + managers
    match /sections/account/{document=**} {
      allow read: if request.auth != null && 
                     (hasDepartmentAccess('ACCOUNTING') || 
                      isManagerOrHigher());
      allow write: if hasDepartmentAccess('ACCOUNTING') || isManagerOrHigher();
    }
    
    match /sections/credits/{document=**} {
      allow read: if request.auth != null && 
                     (hasDepartmentAccess('ACCOUNTING') || 
                      isManagerOrHigher());
      allow write: if hasDepartmentAccess('ACCOUNTING') || isManagerOrHigher();
    }
    
    // Sales operational data - restrict to sales dept + managers
    match /sections/sales/{document=**} {
      allow read: if request.auth != null && 
                     (hasDepartmentAccess('SALES') || 
                      isManagerOrHigher());
      allow write: if hasDepartmentAccess('SALES') || isManagerOrHigher();
    }
    
    // Service operational data - restrict to service dept + managers
    match /sections/services/{document=**} {
      allow read: if request.auth != null && 
                     (hasDepartmentAccess('SERVICE') || 
                      isManagerOrHigher());
      allow write: if hasDepartmentAccess('SERVICE') || isManagerOrHigher();
    }
    
    // Inventory operational data - restrict to inventory dept + managers
    match /sections/stocks/{document=**} {
      allow read: if request.auth != null && 
                     (hasDepartmentAccess('INVENTORY') || 
                      isManagerOrHigher());
      allow write: if hasDepartmentAccess('INVENTORY') || isManagerOrHigher();
    }
    
    // HR operational data - restrict to hr dept + managers
    match /sections/hr/{document=**} {
      allow read: if request.auth != null && 
                     (hasDepartmentAccess('HR') || 
                      isManagerOrHigher());
      allow write: if hasDepartmentAccess('HR') || isManagerOrHigher();
    }
        
    // Reports - accessible to all authenticated users with basic read access
    match /data/reports/{document=**} {
      allow read: if request.auth != null;
      allow write: if isLeadOrHigher();
    }
    
    
    // ====================================================================
    // PROVINCE-SPECIFIC DATA ACCESS
    // ====================================================================
    
    // Province-specific business data with geographic filtering
    match /data/company/provinces/{provinceId}/{collection}/{document=**} {
      allow read: if request.auth != null && hasProvinceAccess(provinceId);
      allow write: if request.auth != null && hasProvinceAccess(provinceId) && 
                      isLeadOrHigher();
    }
    
    // Branch-specific data with geographic filtering
    match /data/company/branches/{branchCode}/{collection}/{document=**} {
      allow read: if request.auth != null && hasBranchAccess(branchCode);
      allow write: if request.auth != null && hasBranchAccess(branchCode) && 
                      isLeadOrHigher();
    }
    
    // ====================================================================
    // SYSTEM DATA AND LOGS
    // ====================================================================
            
    // Change logs - read access for leads+, write for admins only
    match /changeLogs/{document=**} {
      allow read: if isLeadOrHigher();
      allow write: if isAdmin();
    }
    
    // System logs - admin access only
    match /logs/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // ====================================================================
    // MESSAGING AND NOTIFICATIONS
    // ====================================================================
    
    // Messages - users can access their own messages
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
                            (resource.data.userId == request.auth.uid ||
                             resource.data.recipientId == request.auth.uid ||
                             isManagerOrHigher());
    }
    
    // Message tokens - users manage their own tokens
    match /messageTokens/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Notifications - users can access their own notifications
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
                            (resource.data.userId == request.auth.uid ||
                             isManagerOrHigher());
    }
    
    // ====================================================================
    // STATUS AND UPDATES
    // ====================================================================
    
    // User status - users manage their own status, managers can view all
    match /status/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      (resource.data.userId == request.auth.uid ||
                       isManagerOrHigher());
    }
    
    // System updates - admin access only
    match /updates/{document=**} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // ====================================================================
    // ERROR HANDLING
    // ====================================================================
    
    // Authenticated error logs
    match /errors/auth/{document=**} {
      allow read: if isAdmin();
      allow write: if request.auth != null;
    }
    
    // Unauthenticated error logs (public write, admin read)
    match /errors/no_auth/{document=**} {
      allow read: if isAdmin();
      allow write: if true;
    }
    
    // ====================================================================
    // FUTURE COLLECTIONS (Reference Data - Accessible to All)
    // ====================================================================
    
    // Sales customers - reference data for forms (accessible to all)
    match /data/sales/customers/{customerId} {
      allow read, write: if request.auth != null;
    }
    
    // Sales referrers - reference data for forms (accessible to all)
    match /data/sales/referrers/{referrerId} {
      allow read, write: if request.auth != null;
    }
    
    // Sales giveaways - reference data for forms (accessible to all)
    match /data/sales/giveaways/{giveawayId} {
      allow read, write: if request.auth != null;
    }
    
    // Product vehicle lists - reference data (accessible to all)
    match /data/products/vehicleList/{vehicleId} {
      allow read: if request.auth != null;
      allow write: if isManagerOrHigher();
    }
    
    // Model lists - reference data (accessible to all)
    match /modelList/{modelId} {
      allow read: if request.auth != null;
      allow write: if isManagerOrHigher();
    }
    
    // General products data - reference data (accessible to all)
    match /data/products/{document=**} {
      allow read: if request.auth != null;
      allow write: if isManagerOrHigher();
    }
    
    // ====================================================================
    // FALLBACK - DENY ALL OTHER ACCESS
    // ====================================================================
    
    // All other paths are denied by default
    // This ensures security by requiring explicit rules for all data access
  }
}