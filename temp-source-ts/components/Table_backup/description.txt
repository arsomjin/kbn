1.	Use antd’s `Form`, `EditableRow`, and `EditableCell` so that changes are reflected immediately.
2.	Automatically choose the correct input component (like <BooleanSelector>, <EmployeeSelector>, etc.) based on dataIndex (the same way GetColumns or getInputNode does).
3.	Keep columns flexible in width (tableLayout="auto") – do not fix each column’s width or else they won’t auto-resize.

1) Create a custom EditableCell that uses your getInputNode logic

First, remove the local Input/InputNumber from your original EditableCell in SaleItems.js, and replace it with a call to your existing getInputNode(...). That function decides which input to use based on the column’s dataIndex, whether it’s numeric, etc.
EditableCell.js


Key points:
	•	We call getInputNode(...) from your existing code, which automatically returns an <Input>, <Select>, or any of your specialized selectors (e.g. <DealerSelector>, <VehicleSelector>, etc.) based on the column’s dataIndex.
	•	Editing is triggered by a simple click on the cell (for editable: true columns).
	•	Once the user presses Enter or leaves (onBlur in your custom input) – the save() method is called, the value is validated, and your parent table is updated.


2) A single Form context for the entire table row

Just like EditableRowTable, you wrap each <tr> in an <EditableRow> that shares the same Form instance:
EditableRow.js

Then your table uses components={{ body: { row: EditableRow, cell: EditableCell }}} so each row has its own Form.

3) Define your columns

Below is an example of a “Sale Items” table that merges your original logic with the approach from EditableRowTable. In short:
	1.	No fixed widths – to keep columns flexible, omit width: 120 from each column.
	2.	For each column that is editable, set editable: true.
	3.	For immediate row updates, pass handleSave to your cell via onCell.

How it works
	1.	EditableRow creates a new Form context per row.
	2.	EditableCell determines if the column is editable; if so, it renders antd <Form.Item> with your specialized getInputNode() from api/Table.
	3.	On blur or enter, handleSave() merges the updated values back into local state (data), calls onChange, and immediately re-renders the updated row.
	4.	We omit fixed width on each column, then specify tableLayout="auto" and scroll={{ x: 'max-content' }} to let columns autosize.
