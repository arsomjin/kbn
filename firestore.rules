rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user has admin privileges
    function hasAdminAccess() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.auth.accessLevel in [
          'SUPER_ADMIN', 
          'PROVINCE_MANAGER', 
          'BRANCH_MANAGER'
        ];
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.auth.accessLevel == 'SUPER_ADMIN';
    }
    
    // Allow users to read/write their own user document and any subcollections
    // This includes pending users who are still authenticated
    match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
      // Allow admin users to read other users for user management
      allow read: if hasAdminAccess();
      // Allow admin users to update other users for user management
      allow write: if hasAdminAccess();
    }
    
    match /users/{uid}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
      // Allow admin access to user subcollections
      allow read, write: if hasAdminAccess();
    }
    
    // Allow access to approval requests for system operations
    match /approvalRequests/{requestId} {
      allow read, write: if request.auth != null;
    }

    // Public access for branch and province data in company collection
    match /data/company/branches/{branchId} {
      allow read: if true; // Allow public read access to branches
      allow write: if true; // Temporarily allow public write for setup
    }
    
    match /data/company/provinces/{provinceId} {
      allow read: if true; // Allow public read access to provinces
      allow write: if true; // Temporarily allow public write for setup
    }
    
    match /data/company/departments/{departmentId} {
      allow read: if true; // Allow public read access to departments
      allow write: if true; // Temporarily allow public write for setup
    }

    // All other data requires authentication (excluding company data which is handled above)
    match /data/{document=**} {
      allow read, write: if request.auth != null;
    }
    match /sections/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /anomaly/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /changeLogs/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /logs/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /messages/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /messageTokens/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /notifications/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /reports/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /status/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /updates/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /errors/auth/{document=**} {
      allow read, write: if request.auth.uid != null;
    }
    match /errors/no_auth/{document=**} {
      allow write: if true;
      allow read: if request.auth.uid != null;
    }
  }
}