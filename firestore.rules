rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ====================================================================
    // HELPER FUNCTIONS FOR DEVELOPMENT (TEMPORARY - VERY PERMISSIVE)
    // ====================================================================
    
    // Get user's data from their user document
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if user exists in system
    function userExists() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // TEMPORARY: Very permissive admin check for development
    function isAdmin() {
      return request.auth != null && 
             (userExists() == false || // Allow if user doesn't exist yet (for signup)
              getUserData().isDev == true || 
              getUserData().access.authority == 'ADMIN' ||
              true); // TEMPORARY: Allow all authenticated users for development
    }

    // ====================================================================
    // USERS STRUCTURE DATA
    // ====================================================================
  	match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
  	match /users/{uid}/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }

    // ====================================================================
    // PUBLIC DATA (Reference Data - Public for Registration)
    // ====================================================================
    // Provinces - PUBLIC READ for registration, write for admins only
    match /data/company/provinces/{provinceId} {
      allow read: if true; // Public read access for signup form
      allow write: if isAdmin();
    }
    
    // Branches - PUBLIC READ for registration, write for admins only
    match /data/company/branches/{branchId} {
      allow read: if true; // Public read access for signup form
      allow write: if isAdmin();
    }
    
    // Departments - PUBLIC READ for registration, write for admins only
    match /data/company/departments/{departmentId} {
      allow read: if true; // Public read access for signup form
      allow write: if isAdmin();
    }

    // ====================================================================
    // PENDING APPROVAL
    // ====================================================================
    // Approval requests - authenticated users can access
    match /approvalRequests/{requestId} {
      allow read, write: if request.auth != null;
    }

    // ====================================================================
    // COMPANY STRUCTURE DATA
    // ====================================================================
    match /data/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /sections/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /anomaly/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /changeLogs/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /changeLogs_bak/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /logs/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /notifications/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /messages/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /messageTokens/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /reports/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /status/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /updates/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /errors/auth/{document=**} {
    	allow read, write: if request.auth.uid != null;
    }
    match /errors/no_auth/{document=**} {
    	allow write: if true;
      allow read: if request.auth.uid != null;
    }
  }
}